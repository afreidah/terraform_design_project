name: Terraform CI/CD

on:
  pull_request:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'Makefile'

  push:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'

env:
  AWS_REGION: 'us-east-1'
  DOCKER_IMAGE: terraform-tooling

jobs:
  build-image:
    name: Build Tooling Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ env.DOCKER_IMAGE }}.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/${{ env.DOCKER_IMAGE }}.tar
          retention-days: 1

  pull_request:
    name: PR - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        environment: [production]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Debug - Verify Infracost setup
        run: |
          if [ -z "$INFRACOST_API_KEY" ]; then
            echo "‚ùå INFRACOST_API_KEY environment variable is NOT set"
          else
            echo "‚úÖ INFRACOST_API_KEY is set (length: ${#INFRACOST_API_KEY} characters)"
          fi
          infracost --version
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

      - name: Run validation
        id: validate
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e INFRACOST_API_KEY=${{ secrets.INFRACOST_API_KEY }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            make pull_request ENV=${{ matrix.environment }}
        continue-on-error: true

      - name: Extract plan
        if: always()
        run: |
          cd environments/${{ matrix.environment }}
          [ -f tfplan ] && terraform show -no-color tfplan > tfplan.txt || echo "No plan generated" > tfplan.txt

      - name: Generate Infracost JSON
        if: always()
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: |
          infracost breakdown --path environments/${{ matrix.environment }} \
            --format json \
            --out-file /tmp/infracost-${{ matrix.environment }}.json
        continue-on-error: true

      - name: Post Infracost comment
        if: always() && hashFiles('/tmp/infracost-${{ matrix.environment }}.json') != ''
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost-${{ matrix.environment }}.json
          behavior: update
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfplan-${{ matrix.environment }}
          path: environments/${{ matrix.environment }}/tfplan*
          retention-days: 30

      - uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const planPath = 'environments/${{ matrix.environment }}/tfplan.txt';
            let plan = 'Plan not available';

            if (fs.existsSync(planPath)) {
              plan = fs.readFileSync(planPath, 'utf8');
              if (plan.length > 60000) plan = plan.substring(0, 60000) + '\n\n...(truncated)';
            }

            const status = '${{ steps.validate.outcome }}' === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const body = `## ${status} Terraform PR Validation

            **Environment:** ${{ matrix.environment }}

            <details><summary>üìã Plan</summary>

            \`\`\`terraform
            ${plan}
            \`\`\`
            </details>`;

            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(c => c.user.type === 'Bot' && c.body.includes('${{ matrix.environment }}'));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - if: steps.validate.outcome != 'success'
        run: exit 1

  merge-validation:
    name: Merge - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push'
    strategy:
      matrix:
        environment: [production]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      - run: docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar
      - run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            make pull_request ENV=${{ matrix.environment }}
