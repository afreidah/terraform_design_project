name: Terraform CI/CD

on:
  pull_request:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'Makefile'

  push:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  AWS_REGION: 'us-east-1'
  DOCKER_IMAGE: terraform-tooling

jobs:
  # ============================================================================
  # BUILD DOCKER IMAGE
  # ============================================================================
  build-image:
    name: Build Tooling Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ env.DOCKER_IMAGE }}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/${{ env.DOCKER_IMAGE }}.tar
          retention-days: 1

  # ============================================================================
  # PULL REQUEST VALIDATION
  # ============================================================================
  pull_request:
    name: PR Validation - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      pull-requests: write
      id-token: write

    strategy:
      matrix:
        environment: [production]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar
          docker image ls -a

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          # OR use access keys:
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run PR validation in Docker
        id: pr-checks
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e ENV=${{ matrix.environment }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            bash -c "make pull_request ENV=${{ matrix.environment }}"
        continue-on-error: true

      - name: Extract plan output
        if: always()
        run: |
          if [ -f environments/${{ matrix.environment }}/tfplan ]; then
            docker run --rm \
              -v ${{ github.workspace }}:/workspace \
              ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
              bash -c "cd environments/${{ matrix.environment }} && terraform show -no-color tfplan" > tfplan.txt
          else
            echo "No plan file found" > tfplan.txt
          fi

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfplan-${{ matrix.environment }}-${{ github.sha }}
          path: |
            environments/${{ matrix.environment }}/tfplan
            tfplan.txt
          retention-days: 30

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let planOutput = 'Plan output not available';
            try {
              planOutput = fs.readFileSync('tfplan.txt', 'utf8');
              // Truncate if too long for GitHub comment
              if (planOutput.length > 60000) {
                planOutput = planOutput.substring(0, 60000) + '\n\n... (truncated)';
              }
            } catch (error) {
              planOutput = `Error reading plan: ${error.message}`;
            }

            const status = '${{ steps.pr-checks.outcome }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
            const emoji = '${{ steps.pr-checks.outcome }}' === 'success' ? '🎉' : '⚠️';

            const output = `
            ## ${emoji} Terraform PR Validation Results

            **Environment:** \`${{ matrix.environment }}\`
            **Status:** ${status}
            **Docker Image:** \`${{ env.DOCKER_IMAGE }}:${{ github.sha }}\`

            ### 🔍 Checks Performed:
            - ✅ Terraform Format Check
            - ✅ Terraform Validate
            - ✅ TFLint Analysis
            - ✅ Module Tests
            - ✅ Security Scans
              - TFSec
              - Trivy
              - Checkov
            - ✅ Terraform Plan

            <details>
            <summary>📋 View Terraform Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            <details>
            <summary>🔧 Tools Used</summary>

            | Tool | Purpose |
            |------|---------|
            | Terraform | Infrastructure provisioning |
            | TFLint | Terraform linting |
            | TFSec | Security scanning |
            | Trivy | Vulnerability scanning |
            | Checkov | Policy compliance |

            </details>

            ---

            <sub>**Workflow:** \`${{ github.workflow }}\` | **Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) | **Commit:** \`${{ github.sha }}\`</sub>
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Terraform PR Validation Results')
            );

            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }

      - name: Set job status
        if: steps.pr-checks.outcome != 'success'
        run: |
          echo "::error::PR validation checks failed"
          exit 1

  # ============================================================================
  # MERGE / DEPLOY TO PRODUCTION
  # ============================================================================
  merge:
    name: Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        environment: [production]
      max-parallel: 1

    environment:
      name: ${{ matrix.environment }}
      url: https://console.aws.amazon.com/console/home?region=${{ env.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar
          docker image ls -a

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ${{ matrix.environment }}
        id: deploy
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e ENV=${{ matrix.environment }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            bash -c "make merge ENV=${{ matrix.environment }}"

      - name: Create deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.deploy.outcome == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Console:** https://console.aws.amazon.com/console/home?region=${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Deployment to ${{ matrix.environment }} failed!"
          exit 1

  # ============================================================================
  # MANUAL DEPLOYMENT (workflow_dispatch)
  # ============================================================================
  manual-deploy:
    name: Manual Deploy - ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      id-token: write

    environment:
      name: ${{ github.event.inputs.environment }}
      url: https://console.aws.amazon.com/console/home?region=${{ env.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Manual deployment
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e ENV=${{ github.event.inputs.environment }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            bash -c "make merge ENV=${{ github.event.inputs.environment }}"
