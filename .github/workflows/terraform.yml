name: Terraform CI/CD

on:
  pull_request:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'Makefile'

  push:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'

env:
  AWS_REGION: 'us-east-1'
  DOCKER_IMAGE: terraform-tooling

jobs:
  build-image:
    name: Build Tooling Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ env.DOCKER_IMAGE }}.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/${{ env.DOCKER_IMAGE }}.tar
          retention-days: 1

  pull_request:
    name: PR - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        environment: [production]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar

      - name: Run validation and generate plan
        id: validate
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            make pull_request ENV=${{ matrix.environment }}
        continue-on-error: true

      - name: Extract plan
        if: always()
        run: |
          if [ -f environments/${{ matrix.environment }}/tfplan ]; then
            echo "‚úÖ Plan file found, converting to text..."
            docker run --rm \
              -v ${{ github.workspace }}:/workspace \
              -w /workspace/environments/${{ matrix.environment }} \
              ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
              terraform show -no-color tfplan > environments/${{ matrix.environment }}/tfplan.txt
            echo "Plan size: $(wc -l < environments/${{ matrix.environment }}/tfplan.txt) lines"
          else
            echo "‚ùå No plan file found"
            echo "No plan generated" > environments/${{ matrix.environment }}/tfplan.txt
          fi

      - name: Generate Infracost breakdown
        if: always()
        run: |
          echo "üîç Generating Infracost breakdown..."
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e INFRACOST_API_KEY=${{ secrets.INFRACOST_API_KEY }} \
            infracost/infracost:latest breakdown \
            --path environments/${{ matrix.environment }} \
            --format json \
            --out-file /workspace/infracost-${{ matrix.environment }}.json

          if [ -f infracost-${{ matrix.environment }}.json ]; then
            echo "‚úÖ Infracost JSON generated successfully"
            echo "File size: $(wc -c < infracost-${{ matrix.environment }}.json) bytes"
          else
            echo "‚ùå Infracost JSON file not created"
          fi

      - name: Post Infracost comment
        if: always() && hashFiles('infracost-${{ matrix.environment }}.json') != ''
        run: |
          echo "üí¨ Posting Infracost comment to PR..."
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e INFRACOST_API_KEY=${{ secrets.INFRACOST_API_KEY }} \
            infracost/infracost:latest comment github \
            --path /workspace/infracost-${{ matrix.environment }}.json \
            --repo ${{ github.repository }} \
            --pull-request ${{ github.event.pull_request.number }} \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --behavior update
          echo "‚úÖ Infracost comment posted"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfplan-${{ matrix.environment }}
          path: |
            environments/${{ matrix.environment }}/tfplan*
            infracost-${{ matrix.environment }}.json
          retention-days: 30

      - uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const planPath = 'environments/${{ matrix.environment }}/tfplan.txt';
            let plan = 'Plan not available';

            if (fs.existsSync(planPath)) {
              plan = fs.readFileSync(planPath, 'utf8');

              // Check if plan is essentially empty
              if (plan.trim() === '' || plan === 'No plan generated') {
                plan = '‚ö†Ô∏è Plan file exists but appears to be empty. Check the "Extract plan" step logs.';
              } else if (plan.length > 60000) {
                plan = plan.substring(0, 60000) + '\n\n...(truncated - see artifacts for full plan)';
              }
            } else {
              plan = '‚ùå Plan file not found. The terraform plan may have failed.';
            }

            const status = '${{ steps.validate.outcome }}' === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const body = `## ${status} Terraform PR Validation

            **Environment:** ${{ matrix.environment }}

            <details open><summary>üìã Plan</summary>

            \`\`\`terraform
            ${plan}
            \`\`\`
            </details>

            > üí∞ **Cost estimate:** Check for Infracost comment below`;

            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(c => c.user.type === 'Bot' && c.body.includes('${{ matrix.environment }}'));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - if: steps.validate.outcome != 'success'
        run: exit 1

  merge-validation:
    name: Merge - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push'
    strategy:
      matrix:
        environment: [production]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      - run: docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar
      - run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            make pull_request ENV=${{ matrix.environment }}
