name: Terraform CI/CD

on:
  pull_request:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'Makefile'

  push:
    branches: [main, master]
    paths:
      - 'environments/**'
      - 'modules/**'

env:
  AWS_REGION: 'us-east-1'
  DOCKER_IMAGE: terraform-tooling

jobs:
  # ============================================================================
  # BUILD DOCKER IMAGE
  # ============================================================================
  build-image:
    name: Build Tooling Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ env.DOCKER_IMAGE }}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/${{ env.DOCKER_IMAGE }}.tar
          retention-days: 1

  # ============================================================================
  # PULL REQUEST VALIDATION (Plan Only - No Apply)
  # ============================================================================
  pull_request:
    name: PR Validation - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      pull-requests: write

    strategy:
      matrix:
        environment: [production]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar
          docker image ls -a

      - name: Run PR validation in Docker
        id: pr-checks
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e ENV=${{ matrix.environment }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            bash -c "
              set -e
              echo '======================================'
              echo 'Starting PR validation checks'
              echo 'Environment: ${{ matrix.environment }}'
              echo '======================================'

              # Run all checks and plan (no apply!)
              make pull_request ENV=${{ matrix.environment }}

              echo '======================================'
              echo 'Extracting plan output'
              echo '======================================'

              if [ -f environments/${{ matrix.environment }}/tfplan ]; then
                cd environments/${{ matrix.environment }}
                terraform show -no-color tfplan > tfplan.txt 2>&1 || echo 'Plan output could not be extracted' > tfplan.txt
                echo '✓ Plan output saved to tfplan.txt'
              else
                echo '⚠ No plan file found'
                mkdir -p environments/${{ matrix.environment }}
                echo 'No plan was generated' > environments/${{ matrix.environment }}/tfplan.txt
              fi
            "
        continue-on-error: true

      - name: Verify plan output exists
        if: always()
        run: |
          ls -la environments/${{ matrix.environment }}/ || echo "Environment directory not found"
          if [ -f environments/${{ matrix.environment }}/tfplan.txt ]; then
            echo "✓ Plan output file exists"
            wc -l environments/${{ matrix.environment }}/tfplan.txt
          else
            echo "⚠ Creating placeholder plan output"
            mkdir -p environments/${{ matrix.environment }}
            echo "Plan output was not generated" > environments/${{ matrix.environment }}/tfplan.txt
          fi

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfplan-${{ matrix.environment }}-${{ github.sha }}
          path: |
            environments/${{ matrix.environment }}/tfplan
            environments/${{ matrix.environment }}/tfplan.txt
          retention-days: 30

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let planOutput = 'Plan output not available';
            const planPath = 'environments/${{ matrix.environment }}/tfplan.txt';

            try {
              if (fs.existsSync(planPath)) {
                planOutput = fs.readFileSync(planPath, 'utf8');
                if (planOutput.length > 60000) {
                  planOutput = planOutput.substring(0, 60000) + '\n\n... (truncated - download artifact for full plan)';
                }
              }
            } catch (error) {
              planOutput = `Error reading plan: ${error.message}`;
            }

            const status = '${{ steps.pr-checks.outcome }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
            const emoji = '${{ steps.pr-checks.outcome }}' === 'success' ? '🎉' : '⚠️';

            const output = `
            ## ${emoji} Terraform PR Validation Results

            **Environment:** \`${{ matrix.environment }}\`
            **Status:** ${status}
            **Mode:** 🔍 Plan Only (No Deployment)

            ### 🔍 Checks Performed:
            - ✅ Terraform Format Check
            - ✅ Terraform Validate
            - ✅ TFLint Analysis
            - ✅ Module Tests
            - ✅ Security Scans (TFSec, Trivy, Checkov)
            - ✅ Terraform Plan

            <details>
            <summary>📋 View Terraform Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            <details>
            <summary>💰 Cost Estimate</summary>

            Run \`make cost ENV=${{ matrix.environment }}\` locally to estimate costs with openinfraquote.

            </details>

            ---

            <sub>**Note:** This workflow only validates and plans. No infrastructure will be deployed. | [Workflow Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>
            `;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Terraform PR Validation Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }

      - name: Set job status
        if: steps.pr-checks.outcome != 'success'
        run: |
          echo "::error::PR validation checks failed"
          exit 1

  # ============================================================================
  # MERGE VALIDATION (Plan Only - Still No Deploy!)
  # ============================================================================
  merge-validation:
    name: Merge Validation - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read

    strategy:
      matrix:
        environment: [production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.DOCKER_IMAGE }}.tar

      - name: Run validation and plan
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e ENV=${{ matrix.environment }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            bash -c "make pull_request ENV=${{ matrix.environment }}"

      - name: Create summary
        run: |
          echo "## ✅ Merge Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** Plan Only (No Deployment)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All validation checks passed. Infrastructure changes planned successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Note:** To deploy this infrastructure, you would need to run \`make apply ENV=${{ matrix.environment }}\` manually." >> $GITHUB_STEP_SUMMARY
